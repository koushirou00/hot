// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---　イベント関連 ----- 
model Event {
  id           String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  eventDate    DateTime        @map("event_date")
  name         String          @unique
  prefectureId Int             @map("prefecture_id")
  prefecture   Prefecture      @relation(fields: [prefectureId], references: [id])
  follower     EventFollower[]
  post         Post[]

  @@map("event")
}

model Prefecture {
  id           Int      @id
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  name         String
  nameAlphabet String   @map("name_alphabet")
  block        String
  event        Event[]

  @@map("prefecture")
}

model EventFollower {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id") @db.Uuid
  eventId   String   @map("event_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("event_follower")
}

// ---　ユーザー関連 ----- 
model User {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  name                String               @default("NO NAME")
  icon                String?
  introduction        String?
  instagram           String?
  x                   String?
  lock                Boolean              @default(false)
  following           Follow[]             @relation("UserFollows")
  follower            Follow[]             @relation("UserFollowers")
  blocking            Block[]              @relation("UserBlocks")
  blocker             Block[]              @relation("UserBlockers")
  followEvents        EventFollower[]
  post                Post[]
  like                Like[]
  bad                 Bad[]
  retweet             Retweet[]
  comment             Comment[]
  commentlike         CommentLike[]
  commentbad          CommentBad[]
  commentRetweet      CommentRetweet[]
  notificationSetting NotificationSetting?

  @@map("user")
}

model Follow {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  userId        String   @map("user_id") @db.Uuid
  followingId   String   @map("following_id") @db.Uuid
  status        String   @default("approved")
  user          User     @relation("UserFollows", fields: [userId], references: [id])
  followingUser User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@map("follow")
}

model Block {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  userId     String   @map("user_id") @db.Uuid
  blockingId String   @map("blocking_id") @db.Uuid
  user       User     @relation("UserBlocks", fields: [userId], references: [id])
  blocked    User     @relation("UserBlockers", fields: [blockingId], references: [id])

  @@map("block")
}

// ---　つぶやき関連 ----- 
model Post {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  text           String
  image          String?
  category       String?
  userId         String           @map("user_id") @db.Uuid
  eventId        String           @map("event_id") @db.Uuid
  like           Like[]
  bad            Bad[]
  retweet        Retweet[]
  commentlike    CommentLike[]
  commentbad     CommentBad[]
  commentretweet CommentRetweet[]
  comment        Comment[]
  user           User             @relation(fields: [userId], references: [id])
  event          Event            @relation(fields: [eventId], references: [id])

  @@map("post")
}

model Like {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    String   @map("post_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("like")
}

model Bad {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    String   @map("post_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("bad")
}

model Retweet {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    String   @map("post_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("retweet")
}

// ---　つぶやきのコメント関連 ----- 
model Comment {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  parentId  String?   @map("parent_id") @db.Uuid
  text      String
  postId    String    @map("post_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  post      Post      @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  children  Comment[] @relation("CommentChildren") //子コメントの配列
  parent    Comment?  @relation("CommentChildren", fields: [parentId], references: [id]) //parent_idが自己モデル参照であることを明示

  @@map("comment")
}

model CommentLike {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    String   @map("post_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment_like")
}

model CommentBad {
  id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date   DateTime @default(now())
  postId String   @map("post_id") @db.Uuid
  userId String   @map("user_id") @db.Uuid
  post   Post     @relation(fields: [postId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@map("comment_bad")
}

model CommentRetweet {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    String   @map("post_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment_retweet")
}

// ---　通知設定 ----- 
model NotificationSetting {
  id                    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  newPostEvent          Boolean  @default(true) @map("new_post_event")
  newPostFollowing      Boolean  @default(true) @map("new_post_following")
  newFollower           Boolean  @default(true) @map("new_follower")
  followRequest         Boolean  @default(true) @map("follow_request")
  followRequestApproved Boolean  @default(true) @map("follow_request_approved")
  likeOwnPost           Boolean  @default(true) @map("like_own_post")
  badOwnPost            Boolean  @default(false) @map("bad_own_post")
  retweetOwnPost        Boolean  @default(true) @map("retweet_own_post")
  commentOwnPost        Boolean  @default(true) @map("comment_own_post")
  userId                String   @unique @map("user_id") @db.Uuid
  user                  User     @relation(fields: [userId], references: [id])

  @@map("notification_setting")
}

// ---　問い合わせ ----- S
model Contact {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  email     String
  text      String

  @@map("contact")
}
